/*-------------------------------------------------------------------------*/
/*------------------- fuzzyTECH 5.54 Professional Edition -----------------*/
/*-------------------------------------------------------------------------*/
/*-------------------- Code Generator: Java Source Code -------------------*/
/*------------- Code Generation Date: Sun Dec 17 21:41:35 2023 ------------*/
/*----------------------- Fuzzy Logic System: DIGOXIN ---------------------*/
/*-------------------------------------------------------------------------*/
/*-------- (c) 1991-2003 INFORM GmbH, Pascalstr. 23, D-52076 Aachen -------*/
/*------ Inform Software Corp., 2001 Midwest Rd., Oak Brook, IL 60523 -----*/
/*-------------------------------------------------------------------------*/

import com.fuzzytech.ftrun.Ftrun;
import com.fuzzytech.ftrun.FtrunInstantiationException;
import com.fuzzytech.ftrun.FtrunIndexOutOfBoundsException;
import com.fuzzytech.ftrun.FtrunIllegalDataTypeException;

public class DIGOXIN extends Ftrun {
    private static char ftr16[] = {
            0x0670, 0x0000, 0x0000, 0x00D8, 0x03F0, 0x0000, 0x0671, 0x00B0, 0x069D, 0x0040,
            0x00A0, 0x0130, 0x03FA, 0x002E, 0x0404, 0x0430, 0x0670, 0x0658, 0x066E, 0x043C,
            0x0000, 0x00B8, 0x0000,
            0x0513, 0x0003, 0x0064, 0x069D, 0x069D, 0x0000, 0x0000, 0x0000, 0x0001,
            0x0000, 0xFFFF,
            0x0000, 0xFFFF,
            0x0000, 0xFFFF,
            0x0000, 0xFFFF,
            0x8000, 0x8000, 0x8000, 0x8000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x1586, 0x4000,
            0x0000, 0x0000, 0x0000, 0x0000,
            0x4000, 0x9C71, 0xFFFF, 0xFFFF,
            0x0000, 0x0000, 0x0000, 0x5554,
            0x0000, 0x6000, 0x6000, 0x9FFF,
            0x56AD, 0x9FFF, 0x9FFF, 0xDFFF,
            0x9FFF, 0xDFFF, 0xDFFF, 0xFFFF,
            0xDFDB, 0xFFFF, 0xFFFF, 0xFFFF,
            0x0000, 0x0000, 0x0000, 0x0000,
            0x8000, 0x8000, 0x8000, 0x80DD,
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
            0x0000, 0xFFFF, 0x1586, 0xFFFF, 0x4000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x1555, 0x0088, 0x37F7, 0xFFFF, 0x9CB3, 0x0000, 0xFFFF, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x4000, 0x0000, 0x9C71, 0xFFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0xFFFF, 0x5554, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x6000, 0xFFFF, 0x9FFF, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x56AD, 0x0000, 0x9FFF, 0xFFFF, 0xDFFF, 0x0000, 0xFFFF, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x9FFF, 0x0000, 0xDFFF, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0xDFDB, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0xFFFF, 0x0000, 0x0000, 0x8000, 0x0000, 0xFFFF, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x8000, 0x0000, 0x8000, 0xFFFF, 0x80DD, 0x0000, 0xFFFF, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x0000, 0x8000, 0x0000, 0xFFFF, 0x0000, 0xFFFF, 0xFFFF, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
            0x0000, 0x0000,
            0x0000, 0x4000, 0x8000, 0xBFFF, 0xFFFF,
            0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,
            0x0000,
            0x0003,
            0x0003, 0x0000, 0xFFFF,
            0x0005, 0x0000, 0xFFFF,
            0x0003, 0x0000, 0xFFFF,
            0x0001,
            0x0000, 0x0000, 0x0000, 0x0003,
            0x0001,
            0x000B,
            0x0005, 0x8000,
            0x0000,
            0x0004,
            0x005A, 0x0000, 0x005A, 0x0001, 0x005A, 0x0002,
            0x0002, 0x0001, 0x0003, 0x0008, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0003, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0003, 0x000A, 0x0080, 0x000B,
            0x0002, 0x0001, 0x0004, 0x0008, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0004, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0004, 0x000A, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0005, 0x0008, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0005, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0005, 0x000A, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0006, 0x0008, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0006, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0006, 0x000A, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0007, 0x0008, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0007, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0007, 0x000A, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0003, 0x0008, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0003, 0x0009, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0003, 0x000A, 0x0080, 0x000B,
            0x0002, 0x0001, 0x0004, 0x0008, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0004, 0x0009, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0004, 0x000A, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0005, 0x0008, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0005, 0x0009, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0005, 0x000A, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0006, 0x0008, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0006, 0x0009, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0006, 0x000A, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0007, 0x0008, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0007, 0x0009, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0007, 0x000A, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0003, 0x0008, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0003, 0x0009, 0x0080, 0x000D,
            0x0002, 0x0001, 0x0003, 0x000A, 0x0080, 0x000C,
            0x0002, 0x0001, 0x0004, 0x0008, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0004, 0x0009, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0004, 0x000A, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0005, 0x0008, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0005, 0x0009, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0005, 0x000A, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0006, 0x0008, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0006, 0x0009, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0006, 0x000A, 0x0080, 0x000E,
            0x0002, 0x0001, 0x0007, 0x0008, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0007, 0x0009, 0x0080, 0x000F,
            0x0002, 0x0001, 0x0007, 0x000A, 0x0080, 0x000F};
    private static byte ftr8[] = {
            (byte)0x34, (byte)0x00, (byte)0x70, (byte)0x00, (byte)0x34, (byte)0x00,
            (byte)0x34, (byte)0x00, (byte)0x34, (byte)0x00, (byte)0x34, (byte)0x00, (byte)0x34,
            (byte)0x00, (byte)0x34, (byte)0x00,
            (byte)0x34, (byte)0x00, (byte)0x34, (byte)0x00, (byte)0x34, (byte)0x00,
            (byte)0x00, (byte)0xC8,
            (byte)0x6D,
            (byte)0x63, (byte)0x72, (byte)0x63, (byte)0x6C, (byte)0x00, (byte)0x69, (byte)0x64,
            (byte)0x65, (byte)0x61, (byte)0x6C, (byte)0x5F, (byte)0x6B, (byte)0x69, (byte)0x6C,
            (byte)0x6F, (byte)0x00, (byte)0x69, (byte)0x6C, (byte)0x61, (byte)0x63, (byte)0x5F,
            (byte)0x65, (byte)0x74, (byte)0x6B, (byte)0x69, (byte)0x6C, (byte)0x65, (byte)0x73,
            (byte)0x69, (byte)0x6D, (byte)0x69, (byte)0x00, (byte)0x64, (byte)0x69, (byte)0x67,
            (byte)0x6F, (byte)0x78, (byte)0x69, (byte)0x6E, (byte)0x5F, (byte)0x64, (byte)0x6F,
            (byte)0x7A, (byte)0x00};
    private static double ftr64[] = {
            0, 180, 0.005,
            40, 80, 0.001,
            -1, 1, 5e-005,
            0, 0.25, 5e-006};

    //Constructor
    public DIGOXIN() throws FtrunInstantiationException {
        super(ftr64, ftr16, ftr8);
    }

    //Public Methods: Attribute Access
    public void setValue(int ioIndex, double newValue) throws FtrunIndexOutOfBoundsException {
        try{
            setShellValue(ioIndex, newValue);
        }
        catch (FtrunIllegalDataTypeException e) {}
    }
    public double getValue(int ioIndex) throws FtrunIndexOutOfBoundsException {
        try{
            return getShellValue(ioIndex);
        }
        catch (FtrunIllegalDataTypeException e) {return 0;}
    }

    //Input 'crcl': Value Range: 0 .. 180
    public void setcrcl(double newValue){
        setShellVal(0, newValue);
    }
    public double getcrcl(){
        return getShellVal(0);
    }

    //Input 'ideal_kilo': Value Range: 40 .. 80
    public void setideal_kilo(double newValue){
        setShellVal(1, newValue);
    }
    public double getideal_kilo(){
        return getShellVal(1);
    }

    //Input 'ilac_etkilesimi': Value Range: -1 .. 1
    public void setilac_etkilesimi(double newValue){
        setShellVal(2, newValue);
    }
    public double getilac_etkilesimi(){
        return getShellVal(2);
    }

    //Output 'digoxin_doz': Value Range: 0 .. 0.25
    public double getdigoxin_doz(){
        return getShellVal(3);
    }

}
